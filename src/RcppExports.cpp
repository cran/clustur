// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DetermineIfPhylipOrColumnFile
bool DetermineIfPhylipOrColumnFile(const std::string& filePath);
RcppExport SEXP _clustur_DetermineIfPhylipOrColumnFile(SEXP filePathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filePath(filePathSEXP);
    rcpp_result_gen = Rcpp::wrap(DetermineIfPhylipOrColumnFile(filePath));
    return rcpp_result_gen;
END_RCPP
}
// ProcessDistanceFiles
SEXP ProcessDistanceFiles(const std::string& filePath, const Rcpp::DataFrame& countTable, const double cutoff, const bool isSim);
RcppExport SEXP _clustur_ProcessDistanceFiles(SEXP filePathSEXP, SEXP countTableSEXP, SEXP cutoffSEXP, SEXP isSimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type countTable(countTableSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const bool >::type isSim(isSimSEXP);
    rcpp_result_gen = Rcpp::wrap(ProcessDistanceFiles(filePath, countTable, cutoff, isSim));
    return rcpp_result_gen;
END_RCPP
}
// ProcessSparseMatrix
SEXP ProcessSparseMatrix(const std::vector<int>& xPosition, const std::vector<int>& yPosition, const std::vector<double>& data, const Rcpp::DataFrame& countTable, const double cutoff, const bool isSim);
RcppExport SEXP _clustur_ProcessSparseMatrix(SEXP xPositionSEXP, SEXP yPositionSEXP, SEXP dataSEXP, SEXP countTableSEXP, SEXP cutoffSEXP, SEXP isSimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type xPosition(xPositionSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type yPosition(yPositionSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type countTable(countTableSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const bool >::type isSim(isSimSEXP);
    rcpp_result_gen = Rcpp::wrap(ProcessSparseMatrix(xPosition, yPosition, data, countTable, cutoff, isSim));
    return rcpp_result_gen;
END_RCPP
}
// GetDistanceDataFrame
Rcpp::DataFrame GetDistanceDataFrame(const SEXP& fileReader);
RcppExport SEXP _clustur_GetDistanceDataFrame(SEXP fileReaderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type fileReader(fileReaderSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDistanceDataFrame(fileReader));
    return rcpp_result_gen;
END_RCPP
}
// GetCountTable
Rcpp::DataFrame GetCountTable(const SEXP& fileReader);
RcppExport SEXP _clustur_GetCountTable(SEXP fileReaderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type fileReader(fileReaderSEXP);
    rcpp_result_gen = Rcpp::wrap(GetCountTable(fileReader));
    return rcpp_result_gen;
END_RCPP
}
// Cluster
Rcpp::List Cluster(const SEXP& DistanceData, const std::string& method, const std::string& featureColumnName, const std::string& binColumnName, const double cutoff);
RcppExport SEXP _clustur_Cluster(SEXP DistanceDataSEXP, SEXP methodSEXP, SEXP featureColumnNameSEXP, SEXP binColumnNameSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type DistanceData(DistanceDataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type featureColumnName(featureColumnNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type binColumnName(binColumnNameSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(Cluster(DistanceData, method, featureColumnName, binColumnName, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// OptiCluster
Rcpp::List OptiCluster(const SEXP& DistanceData, const std::string& featureColumnName, const std::string& binColumnName, const double cutoff);
RcppExport SEXP _clustur_OptiCluster(SEXP DistanceDataSEXP, SEXP featureColumnNameSEXP, SEXP binColumnNameSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type DistanceData(DistanceDataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type featureColumnName(featureColumnNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type binColumnName(binColumnNameSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(OptiCluster(DistanceData, featureColumnName, binColumnName, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// CreateDataFrameFromSparseCountTable
Rcpp::DataFrame CreateDataFrameFromSparseCountTable(const Rcpp::DataFrame& countTable);
RcppExport SEXP _clustur_CreateDataFrameFromSparseCountTable(SEXP countTableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type countTable(countTableSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateDataFrameFromSparseCountTable(countTable));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_clustur_DetermineIfPhylipOrColumnFile", (DL_FUNC) &_clustur_DetermineIfPhylipOrColumnFile, 1},
    {"_clustur_ProcessDistanceFiles", (DL_FUNC) &_clustur_ProcessDistanceFiles, 4},
    {"_clustur_ProcessSparseMatrix", (DL_FUNC) &_clustur_ProcessSparseMatrix, 6},
    {"_clustur_GetDistanceDataFrame", (DL_FUNC) &_clustur_GetDistanceDataFrame, 1},
    {"_clustur_GetCountTable", (DL_FUNC) &_clustur_GetCountTable, 1},
    {"_clustur_Cluster", (DL_FUNC) &_clustur_Cluster, 5},
    {"_clustur_OptiCluster", (DL_FUNC) &_clustur_OptiCluster, 4},
    {"_clustur_CreateDataFrameFromSparseCountTable", (DL_FUNC) &_clustur_CreateDataFrameFromSparseCountTable, 1},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_clustur(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
